@NonCPS
def parseChurn(String stat) {
  def m = stat =~ /(\d+) insertions.*?(\d+) deletions/
  if (m) {
    return [ m[0][1].toInteger(), m[0][2].toInteger() ]
  } else {
    return [0, 0]
  }
}

pipeline {
  agent any

  triggers {
    cron('H 2 * * *')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Calculate Code Churn') {
      steps {
        script {
          def stat = sh(script: 'git diff --shortstat HEAD~1 HEAD', returnStdout: true).trim()
          def (insertions, deletions) = parseChurn(stat)
          def report = """\
          Code Churn Report
          =================

          Raw stat: ${stat}

          Líneas añadidas: ${insertions}
          Líneas borradas:  ${deletions}
          Total churn:       ${insertions + deletions}
          """
          writeFile file: 'churn.txt', text: report
          echo report
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'churn.txt', fingerprint: true
    }
  }
}
