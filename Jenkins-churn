pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Calculate Code Churn') {
      steps {
        script {
          def stat = sh(script: 'git diff --shortstat HEAD~1 HEAD', returnStdout: true).trim()

          // Extraer insertions y deletions con split y findAll
          def nums = stat.split(',').collect { it.findAll(/\d+/)*.toInteger() }.flatten()
          // nums será [filesChanged, insertions, deletions] o similar
          def insertions = nums.size() > 1 ? nums[1] : 0
          def deletions  = nums.size() > 2 ? nums[2] : 0

          def report = """\
          Code Churn Report
          =================

          Raw stat: ${stat}

          Líneas añadidas: ${insertions}
          Líneas borradas:  ${deletions}
          Total churn:       ${insertions + deletions}
          """
          writeFile file: 'churn.txt', text: report
          echo report
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'churn.txt', fingerprint: true
    }
  }
}
