pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Calculate Code Churn') {
      steps {
        script {
          // Compara la revisión anterior (HEAD~1) con la actual (HEAD)
          def stat = sh(
            script: "git diff --shortstat HEAD~1 HEAD",
            returnStdout: true
          ).trim()

          // Mostramos la línea cruda
          echo "=== Code Churn (último commit) ==="
          echo stat

          // Extraemos inserciones y borrados con regex
          def matcher = stat =~ /(\d+) insertions.*?(\d+) deletions/
          if (matcher) {
            def insertions = matcher[0][1].toInteger()
            def deletions  = matcher[0][2].toInteger()
            def total      = insertions + deletions
            echo "Líneas añadidas: ${insertions}"
            echo "Líneas borradas:  ${deletions}"
            echo "Code Churn total: ${total}"
          } else {
            echo "No se detectaron cambios (sin inserciones ni borrados)."
          }
        }
      }
    }
  }

  post {
    always {
      // Publicamos la métrica en los logs para histórico
      archiveArtifacts artifacts: 'churn.txt', allowEmptyArchive: true
    }
  }
}
